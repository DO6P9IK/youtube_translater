WEBVTT
Kind: captions
Language: ru

00:00:00.080 --> 00:00:01.750 align:start position:0%
 
Если <00:00:00.360><c>вам </c><00:00:00.640><c>когда-либо </c><00:00:00.920><c>требовалось </c><00:00:01.200><c>сгенерировать </c><00:00:01.480><c>список</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
Если вам когда-либо требовалось сгенерировать список
 

00:00:01.760 --> 00:00:03.550 align:start position:0%
Если вам когда-либо требовалось сгенерировать список
в <00:00:02.100><c>Python, </c><00:00:02.440><c>вы, </c><00:00:02.780><c>вероятно, </c><00:00:03.120><c>рассматривали</c>

00:00:03.550 --> 00:00:03.560 align:start position:0%
в Python, вы, вероятно, рассматривали
 

00:00:03.560 --> 00:00:05.070 align:start position:0%
в Python, вы, вероятно, рассматривали
использование <00:00:03.973><c>цикла </c><00:00:04.386><c>for </c><00:00:04.799><c>или</c>

00:00:05.070 --> 00:00:05.080 align:start position:0%
использование цикла for или
 

00:00:05.080 --> 00:00:06.909 align:start position:0%
использование цикла for или
включения <00:00:05.408><c>списков, </c><00:00:05.736><c>и </c><00:00:06.064><c>в </c><00:00:06.392><c>зависимости </c><00:00:06.720><c>от</c>

00:00:06.909 --> 00:00:06.919 align:start position:0%
включения списков, и в зависимости от
 

00:00:06.919 --> 00:00:08.870 align:start position:0%
включения списков, и в зависимости от
ситуации <00:00:07.389><c>включение </c><00:00:07.859><c>списков </c><00:00:08.329><c>может </c><00:00:08.799><c>быть</c>

00:00:08.870 --> 00:00:08.880 align:start position:0%
ситуации включение списков может быть
 

00:00:08.880 --> 00:00:11.150 align:start position:0%
ситуации включение списков может быть
наиболее <00:00:09.239><c>читаемым </c><00:00:09.598><c>и </c><00:00:09.957><c>эффективным </c><00:00:10.316><c>вариантом, </c><00:00:10.675><c>но</c>

00:00:11.150 --> 00:00:11.160 align:start position:0%
наиболее читаемым и эффективным вариантом, но
 

00:00:11.160 --> 00:00:13.350 align:start position:0%
наиболее читаемым и эффективным вариантом, но
почему, <00:00:11.539><c>хотя, </c><00:00:11.918><c>почему </c><00:00:12.297><c>включение </c><00:00:12.676><c>списков</c>

00:00:13.350 --> 00:00:13.360 align:start position:0%
почему, хотя, почему включение списков
 

00:00:13.360 --> 00:00:15.030 align:start position:0%
почему, хотя, почему включение списков
более <00:00:13.647><c>эффективно, </c><00:00:13.934><c>чем </c><00:00:14.221><c>использование </c><00:00:14.508><c>цикла </c><00:00:14.795><c>for</c>

00:00:15.030 --> 00:00:15.040 align:start position:0%
более эффективно, чем использование цикла for
 

00:00:15.040 --> 00:00:17.590 align:start position:0%
более эффективно, чем использование цикла for
при <00:00:15.487><c>генерации </c><00:00:15.934><c>списков, </c><00:00:16.381><c>чтобы </c><00:00:16.828><c>увидеть </c><00:00:17.275><c>четкую</c>

00:00:17.590 --> 00:00:17.600 align:start position:0%
при генерации списков, чтобы увидеть четкую
 

00:00:17.600 --> 00:00:19.390 align:start position:0%
при генерации списков, чтобы увидеть четкую
разницу <00:00:17.919><c>в </c><00:00:18.238><c>производительности, </c><00:00:18.557><c>я </c><00:00:18.876><c>решил </c><00:00:19.195><c>запустить</c>

00:00:19.390 --> 00:00:19.400 align:start position:0%
разницу в производительности, я решил запустить
 

00:00:19.400 --> 00:00:21.750 align:start position:0%
разницу в производительности, я решил запустить
тест, <00:00:19.685><c>с </c><00:00:19.970><c>одной </c><00:00:20.255><c>стороны, </c><00:00:20.540><c>у </c><00:00:20.825><c>меня </c><00:00:21.110><c>есть </c><00:00:21.395><c>функция,</c>

00:00:21.750 --> 00:00:21.760 align:start position:0%
тест, с одной стороны, у меня есть функция,
 

00:00:21.760 --> 00:00:23.630 align:start position:0%
тест, с одной стороны, у меня есть функция,
которая <00:00:22.072><c>принимает </c><00:00:22.384><c>переменную </c><00:00:22.696><c>in </c><00:00:23.008><c>и </c><00:00:23.320><c>создает</c>

00:00:23.630 --> 00:00:23.640 align:start position:0%
которая принимает переменную in и создает
 

00:00:23.640 --> 00:00:26.230 align:start position:0%
которая принимает переменную in и создает
список <00:00:24.046><c>длины </c><00:00:24.452><c>in, </c><00:00:24.858><c>используя </c><00:00:25.264><c>цикл </c><00:00:25.670><c>for </c><00:00:26.076><c>в</c>

00:00:26.230 --> 00:00:26.240 align:start position:0%
список длины in, используя цикл for в
 

00:00:26.240 --> 00:00:28.550 align:start position:0%
список длины in, используя цикл for в
каждой <00:00:26.586><c>итерации </c><00:00:26.932><c>цикла, </c><00:00:27.278><c>она </c><00:00:27.624><c>просто </c><00:00:27.970><c>прикрепляет </c><00:00:28.316><c>этот</c>

00:00:28.550 --> 00:00:28.560 align:start position:0%
каждой итерации цикла, она просто прикрепляет этот
 

00:00:28.560 --> 00:00:31.029 align:start position:0%
каждой итерации цикла, она просто прикрепляет этот
элемент <00:00:28.920><c>к </c><00:00:29.280><c>списку </c><00:00:29.640><c>и </c><00:00:30.000><c>в </c><00:00:30.360><c>конце </c><00:00:30.720><c>просто</c>

00:00:31.029 --> 00:00:31.039 align:start position:0%
элемент к списку и в конце просто
 

00:00:31.039 --> 00:00:33.150 align:start position:0%
элемент к списку и в конце просто
возвращает <00:00:31.324><c>его, </c><00:00:31.609><c>с </c><00:00:31.894><c>другой </c><00:00:32.179><c>стороны, </c><00:00:32.464><c>у </c><00:00:32.749><c>меня </c><00:00:33.034><c>есть</c>

00:00:33.150 --> 00:00:33.160 align:start position:0%
возвращает его, с другой стороны, у меня есть
 

00:00:33.160 --> 00:00:35.229 align:start position:0%
возвращает его, с другой стороны, у меня есть
функция, <00:00:33.480><c>которая </c><00:00:33.800><c>также </c><00:00:34.120><c>принимает </c><00:00:34.440><c>переменную </c><00:00:34.760><c>n,</c>

00:00:35.229 --> 00:00:35.239 align:start position:0%
функция, которая также принимает переменную n,
 

00:00:35.239 --> 00:00:37.350 align:start position:0%
функция, которая также принимает переменную n,
но <00:00:35.565><c>вместо </c><00:00:35.891><c>этого </c><00:00:36.217><c>использует </c><00:00:36.543><c>включение </c><00:00:36.869><c>списков </c><00:00:37.195><c>для</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
но вместо этого использует включение списков для
 

00:00:37.360 --> 00:00:39.950 align:start position:0%
но вместо этого использует включение списков для
создания <00:00:37.848><c>списка </c><00:00:38.336><c>длины </c><00:00:38.824><c>n. </c><00:00:39.312><c>Теперь, </c><00:00:39.800><c>чтобы</c>

00:00:39.950 --> 00:00:39.960 align:start position:0%
создания списка длины n. Теперь, чтобы
 

00:00:39.960 --> 00:00:41.470 align:start position:0%
создания списка длины n. Теперь, чтобы
сравнить <00:00:40.386><c>эффективность </c><00:00:40.812><c>этих </c><00:00:41.238><c>двух</c>

00:00:41.470 --> 00:00:41.480 align:start position:0%
сравнить эффективность этих двух
 

00:00:41.480 --> 00:00:43.549 align:start position:0%
сравнить эффективность этих двух
функций, <00:00:41.910><c>я </c><00:00:42.340><c>сгенерировал </c><00:00:42.770><c>случайное </c><00:00:43.200><c>число</c>

00:00:43.549 --> 00:00:43.559 align:start position:0%
функций, я сгенерировал случайное число
 

00:00:43.559 --> 00:00:46.630 align:start position:0%
функций, я сгенерировал случайное число
от <00:00:44.143><c>1000 </c><00:00:44.727><c>до </c><00:00:45.311><c>12 </c><00:00:45.895><c>миллионов, </c><00:00:46.479><c>затем</c>

00:00:46.630 --> 00:00:46.640 align:start position:0%
от 1000 до 12 миллионов, затем
 

00:00:46.640 --> 00:00:48.150 align:start position:0%
от 1000 до 12 миллионов, затем
замерил, <00:00:46.805><c>сколько </c><00:00:46.970><c>времени </c><00:00:47.135><c>потребуется </c><00:00:47.300><c>каждой </c><00:00:47.465><c>из </c><00:00:47.630><c>этих </c><00:00:47.795><c>функций</c>

00:00:48.150 --> 00:00:48.160 align:start position:0%
замерил, сколько времени потребуется каждой из этих функций
 

00:00:48.160 --> 00:00:49.990 align:start position:0%
замерил, сколько времени потребуется каждой из этих функций
для <00:00:48.693><c>генерации </c><00:00:49.226><c>списка </c><00:00:49.759><c>такого</c>

00:00:49.990 --> 00:00:50.000 align:start position:0%
для генерации списка такого
 

00:00:50.000 --> 00:00:52.869 align:start position:0%
для генерации списка такого
размера. <00:00:50.380><c>Затем </c><00:00:50.760><c>я </c><00:00:51.140><c>повторил </c><00:00:51.520><c>этот </c><00:00:51.900><c>процесс </c><00:00:52.280><c>300</c>

00:00:52.869 --> 00:00:52.879 align:start position:0%
размера. Затем я повторил этот процесс 300
 

00:00:52.879 --> 00:00:58.910 align:start position:0%
размера. Затем я повторил этот процесс 300
раз, <00:00:53.559><c>и </c><00:00:54.239><c>вот</c>

00:00:58.910 --> 00:00:58.920 align:start position:0%
 
 

00:00:58.920 --> 00:01:01.110 align:start position:0%
 
результаты, <00:00:59.380><c>как </c><00:00:59.840><c>вы </c><00:01:00.300><c>можете </c><00:01:00.760><c>видеть,</c>

00:01:01.110 --> 00:01:01.120 align:start position:0%
результаты, как вы можете видеть,
 

00:01:01.120 --> 00:01:02.430 align:start position:0%
результаты, как вы можете видеть,
включение <00:01:01.370><c>списков </c><00:01:01.620><c>имело </c><00:01:01.870><c>довольно </c><00:01:02.120><c>явное</c>

00:01:02.430 --> 00:01:02.440 align:start position:0%
включение списков имело довольно явное
 

00:01:02.440 --> 00:01:04.869 align:start position:0%
включение списков имело довольно явное
преимущество <00:01:02.820><c>перед </c><00:01:03.200><c>использованием </c><00:01:03.580><c>циклов </c><00:01:03.960><c>for.  </c><00:01:04.340><c>Теперь </c><00:01:04.720><c>я</c>

00:01:04.869 --> 00:01:04.879 align:start position:0%
преимущество перед использованием циклов for.  Теперь я
 

00:01:04.879 --> 00:01:06.310 align:start position:0%
преимущество перед использованием циклов for.  Теперь я
хочу <00:01:05.119><c>отметить, </c><00:01:05.359><c>что </c><00:01:05.599><c>это </c><00:01:05.839><c>были </c><00:01:06.079><c>очень</c>

00:01:06.310 --> 00:01:06.320 align:start position:0%
хочу отметить, что это были очень
 

00:01:06.320 --> 00:01:08.270 align:start position:0%
хочу отметить, что это были очень
простые <00:01:06.779><c>операции, </c><00:01:07.238><c>в </c><00:01:07.697><c>зависимости </c><00:01:08.156><c>от</c>

00:01:08.270 --> 00:01:08.280 align:start position:0%
простые операции, в зависимости от
 

00:01:08.280 --> 00:01:09.950 align:start position:0%
простые операции, в зависимости от
операций, <00:01:08.720><c>выполняемых </c><00:01:09.160><c>при </c><00:01:09.600><c>создании</c>

00:01:09.950 --> 00:01:09.960 align:start position:0%
операций, выполняемых при создании
 

00:01:09.960 --> 00:01:12.749 align:start position:0%
операций, выполняемых при создании
списка. <00:01:10.406><c>Этот </c><00:01:10.852><c>Advantage </c><00:01:11.298><c>Gap </c><00:01:11.744><c>может </c><00:01:12.190><c>отличаться. </c><00:01:12.636><c>Я</c>

00:01:12.749 --> 00:01:12.759 align:start position:0%
списка. Этот Advantage Gap может отличаться. Я
 

00:01:12.759 --> 00:01:14.429 align:start position:0%
списка. Этот Advantage Gap может отличаться. Я
также <00:01:12.959><c>хочу </c><00:01:13.159><c>отметить, </c><00:01:13.359><c>что </c><00:01:13.559><c>я </c><00:01:13.759><c>запускал </c><00:01:13.959><c>этот </c><00:01:14.159><c>тест</c>

00:01:14.429 --> 00:01:14.439 align:start position:0%
также хочу отметить, что я запускал этот тест
 

00:01:14.439 --> 00:01:16.830 align:start position:0%
также хочу отметить, что я запускал этот тест
с <00:01:14.839><c>использованием </c><00:01:15.239><c>Python </c><00:01:15.639><c>3.11 </c><00:01:16.039><c>с </c><00:01:16.439><c>официальной</c>

00:01:16.830 --> 00:01:16.840 align:start position:0%
с использованием Python 3.11 с официальной
 

00:01:16.840 --> 00:01:19.230 align:start position:0%
с использованием Python 3.11 с официальной
реализацией <00:01:17.295><c>cpython, </c><00:01:17.750><c>поэтому </c><00:01:18.205><c>в </c><00:01:18.660><c>зависимости </c><00:01:19.115><c>от</c>

00:01:19.230 --> 00:01:19.240 align:start position:0%
реализацией cpython, поэтому в зависимости от
 

00:01:19.240 --> 00:01:20.749 align:start position:0%
реализацией cpython, поэтому в зависимости от
типа <00:01:19.512><c>и </c><00:01:19.784><c>версии </c><00:01:20.056><c>Python, </c><00:01:20.328><c>которую </c><00:01:20.600><c>вы</c>

00:01:20.749 --> 00:01:20.759 align:start position:0%
типа и версии Python, которую вы
 

00:01:20.759 --> 00:01:23.469 align:start position:0%
типа и версии Python, которую вы
используете, <00:01:21.185><c>ваши </c><00:01:21.611><c>результаты </c><00:01:22.037><c>могут </c><00:01:22.463><c>отличаться. </c><00:01:22.889><c>Прежде </c><00:01:23.315><c>чем</c>

00:01:23.469 --> 00:01:23.479 align:start position:0%
используете, ваши результаты могут отличаться. Прежде чем
 

00:01:23.479 --> 00:01:24.789 align:start position:0%
используете, ваши результаты могут отличаться. Прежде чем
мы <00:01:23.639><c>углубимся </c><00:01:23.799><c>в </c><00:01:23.959><c>то, </c><00:01:24.119><c>почему </c><00:01:24.279><c>мы </c><00:01:24.439><c>видим </c><00:01:24.599><c>это</c>

00:01:24.789 --> 00:01:24.799 align:start position:0%
мы углубимся в то, почему мы видим это
 

00:01:24.799 --> 00:01:26.429 align:start position:0%
мы углубимся в то, почему мы видим это
Advantage, <00:01:25.063><c>я </c><00:01:25.327><c>хочу </c><00:01:25.591><c>убедиться, </c><00:01:25.855><c>что </c><00:01:26.119><c>мы</c>

00:01:26.429 --> 00:01:26.439 align:start position:0%
Advantage, я хочу убедиться, что мы
 

00:01:26.439 --> 00:01:29.069 align:start position:0%
Advantage, я хочу убедиться, что мы
сначала <00:01:27.009><c>закрепили </c><00:01:27.579><c>одну </c><00:01:28.149><c>важную </c><00:01:28.719><c>концепцию:</c>

00:01:29.069 --> 00:01:29.079 align:start position:0%
сначала закрепили одну важную концепцию:
 

00:01:29.079 --> 00:01:31.469 align:start position:0%
сначала закрепили одну важную концепцию:
как <00:01:29.535><c>Python </c><00:01:29.991><c>работает </c><00:01:30.447><c>на </c><00:01:30.903><c>вашей </c><00:01:31.359><c>машине.</c>

00:01:31.469 --> 00:01:31.479 align:start position:0%
как Python работает на вашей машине.
 

00:01:31.479 --> 00:01:33.550 align:start position:0%
как Python работает на вашей машине.
Для <00:01:31.635><c>некоторых </c><00:01:31.791><c>из </c><00:01:31.947><c>вас </c><00:01:32.103><c>это </c><00:01:32.259><c>может </c><00:01:32.415><c>быть </c><00:01:32.571><c>шоком, </c><00:01:32.727><c>но </c><00:01:32.883><c>Python </c><00:01:33.039><c>— </c><00:01:33.195><c>это</c>

00:01:33.550 --> 00:01:33.560 align:start position:0%
Для некоторых из вас это может быть шоком, но Python — это
 

00:01:33.560 --> 00:01:35.830 align:start position:0%
Для некоторых из вас это может быть шоком, но Python — это
язык <00:01:33.896><c>программирования </c><00:01:34.232><c>очень </c><00:01:34.568><c>высокого </c><00:01:34.904><c>уровня, </c><00:01:35.240><c>что</c>

00:01:35.830 --> 00:01:35.840 align:start position:0%
язык программирования очень высокого уровня, что
 

00:01:35.840 --> 00:01:37.870 align:start position:0%
язык программирования очень высокого уровня, что
означает, <00:01:36.249><c>что </c><00:01:36.658><c>его </c><00:01:37.067><c>очень </c><00:01:37.476><c>легко</c>

00:01:37.870 --> 00:01:37.880 align:start position:0%
означает, что его очень легко
 

00:01:37.880 --> 00:01:40.030 align:start position:0%
означает, что его очень легко
читать <00:01:38.199><c>и </c><00:01:38.518><c>понимать. </c><00:01:38.837><c>Но </c><00:01:39.156><c>когда </c><00:01:39.475><c>вы </c><00:01:39.794><c>запускаете</c>

00:01:40.030 --> 00:01:40.040 align:start position:0%
читать и понимать. Но когда вы запускаете
 

00:01:40.040 --> 00:01:41.830 align:start position:0%
читать и понимать. Но когда вы запускаете
свой <00:01:40.319><c>скрипт </c><00:01:40.598><c>Python, </c><00:01:40.877><c>необходимо </c><00:01:41.156><c>выполнить </c><00:01:41.435><c>несколько</c>

00:01:41.830 --> 00:01:41.840 align:start position:0%
свой скрипт Python, необходимо выполнить несколько
 

00:01:41.840 --> 00:01:43.550 align:start position:0%
свой скрипт Python, необходимо выполнить несколько
шагов, <00:01:42.144><c>прежде </c><00:01:42.448><c>чем </c><00:01:42.752><c>ваш </c><00:01:43.056><c>код </c><00:01:43.360><c>сможет</c>

00:01:43.550 --> 00:01:43.560 align:start position:0%
шагов, прежде чем ваш код сможет
 

00:01:43.560 --> 00:01:45.590 align:start position:0%
шагов, прежде чем ваш код сможет
фактически <00:01:43.879><c>запуститься </c><00:01:44.198><c>на </c><00:01:44.517><c>ЦП. </c><00:01:44.836><c>Если </c><00:01:45.155><c>бы </c><00:01:45.474><c>вы</c>

00:01:45.590 --> 00:01:45.600 align:start position:0%
фактически запуститься на ЦП. Если бы вы
 

00:01:45.600 --> 00:01:48.310 align:start position:0%
фактически запуститься на ЦП. Если бы вы
просто <00:01:46.008><c>передали </c><00:01:46.416><c>свой </c><00:01:46.824><c>файл </c><00:01:47.232><c>py </c><00:01:47.640><c>ЦП,</c>

00:01:48.310 --> 00:01:48.320 align:start position:0%
просто передали свой файл py ЦП,
 

00:01:48.320 --> 00:01:49.950 align:start position:0%
просто передали свой файл py ЦП,
он <00:01:48.514><c>бы </c><00:01:48.708><c>понятия </c><00:01:48.902><c>не </c><00:01:49.096><c>имел, </c><00:01:49.290><c>что </c><00:01:49.484><c>он </c><00:01:49.678><c>видит.</c>

00:01:49.950 --> 00:01:49.960 align:start position:0%
он бы понятия не имел, что он видит.
 

00:01:49.960 --> 00:01:52.310 align:start position:0%
он бы понятия не имел, что он видит.
Ваш <00:01:50.399><c>код </c><00:01:50.838><c>должен </c><00:01:51.277><c>сначала </c><00:01:51.716><c>пройти </c><00:01:52.155><c>через</c>

00:01:52.310 --> 00:01:52.320 align:start position:0%
Ваш код должен сначала пройти через
 

00:01:52.320 --> 00:01:54.270 align:start position:0%
Ваш код должен сначала пройти через
интерпретатор. <00:01:52.960><c>Теперь </c><00:01:53.600><c>интерпретатор</c>

00:01:54.270 --> 00:01:54.280 align:start position:0%
интерпретатор. Теперь интерпретатор
 

00:01:54.280 --> 00:01:57.149 align:start position:0%
интерпретатор. Теперь интерпретатор
по <00:01:54.613><c>сути </c><00:01:54.946><c>состоит </c><00:01:55.279><c>из </c><00:01:55.612><c>трех </c><00:01:55.945><c>частей: </c><00:01:56.278><c>компилятора,</c>

00:01:57.149 --> 00:01:57.159 align:start position:0%
по сути состоит из трех частей: компилятора,
 

00:01:57.159 --> 00:01:59.109 align:start position:0%
по сути состоит из трех частей: компилятора,
кода <00:01:57.679><c>Bite </c><00:01:58.199><c>и </c><00:01:58.719><c>виртуальной</c>

00:01:59.109 --> 00:01:59.119 align:start position:0%
кода Bite и виртуальной
 

00:01:59.119 --> 00:02:02.389 align:start position:0%
кода Bite и виртуальной
машины <00:01:59.592><c>Python. </c><00:02:00.065><c>Компилятор </c><00:02:00.538><c>сканирует </c><00:02:01.011><c>ваш </c><00:02:01.484><c>файл </c><00:02:01.957><c>py</c>

00:02:02.389 --> 00:02:02.399 align:start position:0%
машины Python. Компилятор сканирует ваш файл py
 

00:02:02.399 --> 00:02:04.230 align:start position:0%
машины Python. Компилятор сканирует ваш файл py
и <00:02:02.799><c>упрощает  </c><00:02:03.199><c>его </c><00:02:03.599><c>функциональность </c><00:02:03.999><c>в</c>

00:02:04.230 --> 00:02:04.240 align:start position:0%
и упрощает  его функциональность в
 

00:02:04.240 --> 00:02:06.510 align:start position:0%
и упрощает  его функциональность в
небольшие <00:02:04.773><c>инструкции, </c><00:02:05.306><c>называемые </c><00:02:05.839><c>байт-кодами.</c>

00:02:06.510 --> 00:02:06.520 align:start position:0%
небольшие инструкции, называемые байт-кодами.
 

00:02:06.520 --> 00:02:08.270 align:start position:0%
небольшие инструкции, называемые байт-кодами.
Затем <00:02:06.930><c>эти </c><00:02:07.340><c>байт-коды </c><00:02:07.750><c>отправляются </c><00:02:08.160><c>в</c>

00:02:08.270 --> 00:02:08.280 align:start position:0%
Затем эти байт-коды отправляются в
 

00:02:08.280 --> 00:02:10.430 align:start position:0%
Затем эти байт-коды отправляются в
виртуальную <00:02:08.664><c>машину </c><00:02:09.048><c>Python, </c><00:02:09.432><c>которая </c><00:02:09.816><c>считывает </c><00:02:10.200><c>эти</c>

00:02:10.430 --> 00:02:10.440 align:start position:0%
виртуальную машину Python, которая считывает эти
 

00:02:10.440 --> 00:02:12.470 align:start position:0%
виртуальную машину Python, которая считывает эти
инструкции <00:02:11.066><c>байт-кода </c><00:02:11.692><c>и </c><00:02:12.318><c>выполняет</c>

00:02:12.470 --> 00:02:12.480 align:start position:0%
инструкции байт-кода и выполняет
 

00:02:12.480 --> 00:02:14.869 align:start position:0%
инструкции байт-кода и выполняет
соответствующую <00:02:12.936><c>функциональность </c><00:02:13.392><c>на </c><00:02:13.848><c>языке </c><00:02:14.304><c>C, </c><00:02:14.760><c>который</c>

00:02:14.869 --> 00:02:14.879 align:start position:0%
соответствующую функциональность на языке C, который
 

00:02:14.879 --> 00:02:16.470 align:start position:0%
соответствующую функциональность на языке C, который
является <00:02:15.065><c>языком </c><00:02:15.251><c>программирования </c><00:02:15.437><c>гораздо </c><00:02:15.623><c>более </c><00:02:15.809><c>низкого </c><00:02:15.995><c>уровня,</c>

00:02:16.470 --> 00:02:16.480 align:start position:0%
является языком программирования гораздо более низкого уровня,
 

00:02:16.480 --> 00:02:18.070 align:start position:0%
является языком программирования гораздо более низкого уровня,
который <00:02:16.946><c>затем </c><00:02:17.412><c>преобразуется </c><00:02:17.878><c>в</c>

00:02:18.070 --> 00:02:18.080 align:start position:0%
который затем преобразуется в
 

00:02:18.080 --> 00:02:19.949 align:start position:0%
который затем преобразуется в
машинный <00:02:18.408><c>код, </c><00:02:18.736><c>который </c><00:02:19.064><c>и </c><00:02:19.392><c>выполняется </c><00:02:19.720><c>на</c>

00:02:19.949 --> 00:02:19.959 align:start position:0%
машинный код, который и выполняется на
 

00:02:19.959 --> 00:02:22.509 align:start position:0%
машинный код, который и выполняется на
процессоре. <00:02:20.423><c>В </c><00:02:20.887><c>этом </c><00:02:21.351><c>видео </c><00:02:21.815><c>нас </c><00:02:22.279><c>интересует</c>

00:02:22.509 --> 00:02:22.519 align:start position:0%
процессоре. В этом видео нас интересует
 

00:02:22.519 --> 00:02:25.110 align:start position:0%
процессоре. В этом видео нас интересует
рассмотрение <00:02:23.305><c>кода </c><00:02:24.091><c>BIK. </c><00:02:24.877><c>Теперь</c>

00:02:25.110 --> 00:02:25.120 align:start position:0%
рассмотрение кода BIK. Теперь
 

00:02:25.120 --> 00:02:26.670 align:start position:0%
рассмотрение кода BIK. Теперь
рассмотрим <00:02:25.719><c>байт-код </c><00:02:26.318><c>для</c>

00:02:26.670 --> 00:02:26.680 align:start position:0%
рассмотрим байт-код для
 

00:02:26.680 --> 00:02:29.030 align:start position:0%
рассмотрим байт-код для
скрипта <00:02:26.880><c>Python. </c><00:02:27.080><c>На </c><00:02:27.280><c>самом </c><00:02:27.480><c>деле </c><00:02:27.680><c>это </c><00:02:27.880><c>довольно </c><00:02:28.080><c>просто. </c><00:02:28.280><c>То,</c>

00:02:29.030 --> 00:02:29.040 align:start position:0%
скрипта Python. На самом деле это довольно просто. То,
 

00:02:29.040 --> 00:02:31.350 align:start position:0%
скрипта Python. На самом деле это довольно просто. То,
что <00:02:29.416><c>мы </c><00:02:29.792><c>собираемся </c><00:02:30.168><c>сделать, </c><00:02:30.544><c>это </c><00:02:30.920><c>импортировать</c>

00:02:31.350 --> 00:02:31.360 align:start position:0%
что мы собираемся сделать, это импортировать
 

00:02:31.360 --> 00:02:34.070 align:start position:0%
что мы собираемся сделать, это импортировать
модуль <00:02:31.620><c>dis </c><00:02:31.880><c>в </c><00:02:32.140><c>наш </c><00:02:32.400><c>скрипт, </c><00:02:32.660><c>что </c><00:02:32.920><c>означает </c><00:02:33.180><c>disassemble </c><00:02:33.440><c>(</c>

00:02:34.070 --> 00:02:34.080 align:start position:0%
модуль dis в наш скрипт, что означает disassemble (
 

00:02:34.080 --> 00:02:36.350 align:start position:0%
модуль dis в наш скрипт, что означает disassemble (
разобрать). <00:02:34.570><c>Этот </c><00:02:35.060><c>модуль </c><00:02:35.550><c>встроен </c><00:02:36.040><c>в</c>

00:02:36.350 --> 00:02:36.360 align:start position:0%
разобрать). Этот модуль встроен в
 

00:02:36.360 --> 00:02:38.470 align:start position:0%
разобрать). Этот модуль встроен в
Python, <00:02:36.906><c>поэтому </c><00:02:37.452><c>нет </c><00:02:37.998><c>необходимости</c>

00:02:38.470 --> 00:02:38.480 align:start position:0%
Python, поэтому нет необходимости
 

00:02:38.480 --> 00:02:41.270 align:start position:0%
Python, поэтому нет необходимости
что-либо <00:02:38.676><c>устанавливать </c><00:02:38.872><c>с </c><00:02:39.068><c>помощью </c><00:02:39.264><c>pip. </c><00:02:39.460><c>Все, </c><00:02:39.656><c>что </c><00:02:39.852><c>нам </c><00:02:40.048><c>нужно </c><00:02:40.244><c>сделать, </c><00:02:40.440><c>это </c><00:02:40.636><c>сказать</c>

00:02:41.270 --> 00:02:41.280 align:start position:0%
что-либо устанавливать с помощью pip. Все, что нам нужно сделать, это сказать
 

00:02:41.280 --> 00:02:43.910 align:start position:0%
что-либо устанавливать с помощью pip. Все, что нам нужно сделать, это сказать
dis.  <00:02:41.870><c>dis </c><00:02:42.460><c>с </c><00:02:43.050><c>именем </c><00:02:43.640><c>функции,</c>

00:02:43.910 --> 00:02:43.920 align:start position:0%
dis.  dis с именем функции,
 

00:02:43.920 --> 00:02:46.470 align:start position:0%
dis.  dis с именем функции,
которую <00:02:44.262><c>мы </c><00:02:44.604><c>хотим </c><00:02:44.946><c>рассматривать </c><00:02:45.288><c>как </c><00:02:45.630><c>входные </c><00:02:45.972><c>данные, </c><00:02:46.314><c>и</c>

00:02:46.470 --> 00:02:46.480 align:start position:0%
которую мы хотим рассматривать как входные данные, и
 

00:02:46.480 --> 00:02:48.149 align:start position:0%
которую мы хотим рассматривать как входные данные, и
поэтому, <00:02:46.675><c>когда </c><00:02:46.870><c>мы </c><00:02:47.065><c>запустим </c><00:02:47.260><c>это, </c><00:02:47.455><c>вы </c><00:02:47.650><c>увидите, </c><00:02:47.845><c>что </c><00:02:48.040><c>мы</c>

00:02:48.149 --> 00:02:48.159 align:start position:0%
поэтому, когда мы запустим это, вы увидите, что мы
 

00:02:48.159 --> 00:02:49.790 align:start position:0%
поэтому, когда мы запустим это, вы увидите, что мы
получаем <00:02:48.399><c>все </c><00:02:48.639><c>эти </c><00:02:48.879><c>инструкции </c><00:02:49.119><c>байт-кода,</c>

00:02:49.790 --> 00:02:49.800 align:start position:0%
получаем все эти инструкции байт-кода,
 

00:02:49.800 --> 00:02:52.030 align:start position:0%
получаем все эти инструкции байт-кода,
связанные <00:02:50.153><c>с </c><00:02:50.506><c>этой </c><00:02:50.859><c>функцией, </c><00:02:51.212><c>все </c><00:02:51.565><c>в </c><00:02:51.918><c>порядке,</c>

00:02:52.030 --> 00:02:52.040 align:start position:0%
связанные с этой функцией, все в порядке,
 

00:02:52.040 --> 00:02:53.190 align:start position:0%
связанные с этой функцией, все в порядке,
поэтому <00:02:52.280><c>давайте </c><00:02:52.520><c>сравним </c><00:02:52.760><c>инструкции </c><00:02:53.000><c>байт-кода</c>

00:02:53.190 --> 00:02:53.200 align:start position:0%
поэтому давайте сравним инструкции байт-кода
 

00:02:53.200 --> 00:02:54.790 align:start position:0%
поэтому давайте сравним инструкции байт-кода
для <00:02:53.529><c>нашей </c><00:02:53.858><c>функции </c><00:02:54.187><c>цикла </c><00:02:54.516><c>for</c>

00:02:54.790 --> 00:02:54.800 align:start position:0%
для нашей функции цикла for
 

00:02:54.800 --> 00:02:56.509 align:start position:0%
для нашей функции цикла for
и

00:02:56.509 --> 00:02:56.519 align:start position:0%
и
 

00:02:56.519 --> 00:02:58.589 align:start position:0%
и
функции <00:02:56.759><c>включения </c><00:02:56.999><c>списка. </c><00:02:57.239><c>Я </c><00:02:57.479><c>хочу </c><00:02:57.719><c>обратить </c><00:02:57.959><c>ваше </c><00:02:58.199><c>внимание</c>

00:02:58.589 --> 00:02:58.599 align:start position:0%
функции включения списка. Я хочу обратить ваше внимание
 

00:02:58.599 --> 00:03:00.270 align:start position:0%
функции включения списка. Я хочу обратить ваше внимание
на <00:02:59.092><c>итеративную </c><00:02:59.585><c>часть </c><00:03:00.078><c>этих</c>

00:03:00.270 --> 00:03:00.280 align:start position:0%
на итеративную часть этих
 

00:03:00.280 --> 00:03:01.910 align:start position:0%
на итеративную часть этих
инструкций, <00:03:00.660><c>потому </c><00:03:01.040><c>что </c><00:03:01.420><c>именно </c><00:03:01.800><c>здесь</c>

00:03:01.910 --> 00:03:01.920 align:start position:0%
инструкций, потому что именно здесь
 

00:03:01.920 --> 00:03:04.229 align:start position:0%
инструкций, потому что именно здесь
лежат <00:03:02.470><c>основные </c><00:03:03.020><c>различия </c><00:03:03.570><c>в </c><00:03:04.120><c>производительности.</c>

00:03:04.229 --> 00:03:04.239 align:start position:0%
лежат основные различия в производительности.
 

00:03:04.239 --> 00:03:06.270 align:start position:0%
лежат основные различия в производительности.
Итак, <00:03:04.525><c>вы </c><00:03:04.811><c>увидите, </c><00:03:05.097><c>что </c><00:03:05.383><c>они </c><00:03:05.669><c>обе </c><00:03:05.955><c>начинаются</c>

00:03:06.270 --> 00:03:06.280 align:start position:0%
Итак, вы увидите, что они обе начинаются
 

00:03:06.280 --> 00:03:08.030 align:start position:0%
Итак, вы увидите, что они обе начинаются
с <00:03:06.826><c>for </c><00:03:07.372><c>itter, </c><00:03:07.918><c>где</c>

00:03:08.030 --> 00:03:08.040 align:start position:0%
с for itter, где
 

00:03:08.040 --> 00:03:10.670 align:start position:0%
с for itter, где
начинается <00:03:08.450><c>итерация </c><00:03:08.860><c>для </c><00:03:09.270><c>обеих </c><00:03:09.680><c>операций.</c>

00:03:10.670 --> 00:03:10.680 align:start position:0%
начинается итерация для обеих операций.
 

00:03:10.680 --> 00:03:12.949 align:start position:0%
начинается итерация для обеих операций.
Далее <00:03:10.935><c>у </c><00:03:11.190><c>нас </c><00:03:11.445><c>идет </c><00:03:11.700><c>быстрая </c><00:03:11.955><c>операция </c><00:03:12.210><c>сохранения </c><00:03:12.465><c>для </c><00:03:12.720><c>каждого</c>

00:03:12.949 --> 00:03:12.959 align:start position:0%
Далее у нас идет быстрая операция сохранения для каждого
 

00:03:12.959 --> 00:03:14.670 align:start position:0%
Далее у нас идет быстрая операция сохранения для каждого
метода, <00:03:13.239><c>это </c><00:03:13.519><c>по </c><00:03:13.799><c>сути </c><00:03:14.079><c>просто </c><00:03:14.359><c>сохранение</c>

00:03:14.670 --> 00:03:14.680 align:start position:0%
метода, это по сути просто сохранение
 

00:03:14.680 --> 00:03:17.949 align:start position:0%
метода, это по сути просто сохранение
следующего <00:03:15.069><c>элемента </c><00:03:15.458><c>в </c><00:03:15.847><c>переменной </c><00:03:16.236><c>X. </c><00:03:16.625><c>Далее </c><00:03:17.014><c>у </c><00:03:17.403><c>нас </c><00:03:17.792><c>идет</c>

00:03:17.949 --> 00:03:17.959 align:start position:0%
следующего элемента в переменной X. Далее у нас идет
 

00:03:17.959 --> 00:03:20.390 align:start position:0%
следующего элемента в переменной X. Далее у нас идет
быстрая <00:03:18.499><c>инструкция </c><00:03:19.039><c>загрузки </c><00:03:19.579><c>для </c><00:03:20.119><c>каждой</c>

00:03:20.390 --> 00:03:20.400 align:start position:0%
быстрая инструкция загрузки для каждой
 

00:03:20.400 --> 00:03:22.149 align:start position:0%
быстрая инструкция загрузки для каждой
операции, <00:03:20.720><c>но </c><00:03:21.040><c>вы </c><00:03:21.360><c>заметите, </c><00:03:21.680><c>что </c><00:03:22.000><c>они</c>

00:03:22.149 --> 00:03:22.159 align:start position:0%
операции, но вы заметите, что они
 

00:03:22.159 --> 00:03:24.589 align:start position:0%
операции, но вы заметите, что они
загружают <00:03:22.689><c>две </c><00:03:23.219><c>отдельные </c><00:03:23.749><c>вещи </c><00:03:24.279><c>в</c>

00:03:24.589 --> 00:03:24.599 align:start position:0%
загружают две отдельные вещи в
 

00:03:24.599 --> 00:03:27.270 align:start position:0%
загружают две отдельные вещи в
цикле <00:03:24.953><c>for, </c><00:03:25.307><c>это </c><00:03:25.661><c>загрузка </c><00:03:26.015><c>списка, </c><00:03:26.369><c>моего </c><00:03:26.723><c>списка, </c><00:03:27.077><c>но</c>

00:03:27.270 --> 00:03:27.280 align:start position:0%
цикле for, это загрузка списка, моего списка, но
 

00:03:27.280 --> 00:03:29.030 align:start position:0%
цикле for, это загрузка списка, моего списка, но
в <00:03:27.576><c>включении </c><00:03:27.872><c>списка </c><00:03:28.168><c>это </c><00:03:28.464><c>просто </c><00:03:28.760><c>загрузка</c>

00:03:29.030 --> 00:03:29.040 align:start position:0%
в включении списка это просто загрузка
 

00:03:29.040 --> 00:03:31.869 align:start position:0%
в включении списка это просто загрузка
текущего <00:03:29.710><c>значения </c><00:03:30.380><c>X. </c><00:03:31.050><c>Итак, </c><00:03:31.720><c>теперь</c>

00:03:31.869 --> 00:03:31.879 align:start position:0%
текущего значения X. Итак, теперь
 

00:03:31.879 --> 00:03:33.229 align:start position:0%
текущего значения X. Итак, теперь
мы <00:03:32.055><c>добрались </c><00:03:32.231><c>до </c><00:03:32.407><c>того </c><00:03:32.583><c>места, </c><00:03:32.759><c>где</c>

00:03:33.229 --> 00:03:33.239 align:start position:0%
мы добрались до того места, где
 

00:03:33.239 --> 00:03:35.470 align:start position:0%
мы добрались до того места, где
лежит <00:03:33.489><c>основная </c><00:03:33.739><c>разница </c><00:03:33.989><c>в </c><00:03:34.239><c>производительности. </c><00:03:34.489><c>Цикл </c><00:03:34.739><c>for </c><00:03:34.989><c>должен </c><00:03:35.239><c>вызвать</c>

00:03:35.470 --> 00:03:35.480 align:start position:0%
лежит основная разница в производительности. Цикл for должен вызвать
 

00:03:35.480 --> 00:03:37.789 align:start position:0%
лежит основная разница в производительности. Цикл for должен вызвать
этот <00:03:35.939><c>метод </c><00:03:36.398><c>загрузки, </c><00:03:36.857><c>чтобы </c><00:03:37.316><c>загрузить</c>

00:03:37.789 --> 00:03:37.799 align:start position:0%
этот метод загрузки, чтобы загрузить
 

00:03:37.799 --> 00:03:39.990 align:start position:0%
этот метод загрузки, чтобы загрузить
метод <00:03:38.132><c>добавления. </c><00:03:38.465><c>Для </c><00:03:38.798><c>некоторых </c><00:03:39.131><c>версий </c><00:03:39.464><c>Python </c><00:03:39.797><c>этот</c>

00:03:39.990 --> 00:03:40.000 align:start position:0%
метод добавления. Для некоторых версий Python этот
 

00:03:40.000 --> 00:03:42.190 align:start position:0%
метод добавления. Для некоторых версий Python этот
байт-код <00:03:40.368><c>метода </c><00:03:40.736><c>загрузки </c><00:03:41.104><c>также </c><00:03:41.472><c>может </c><00:03:41.840><c>называться</c>

00:03:42.190 --> 00:03:42.200 align:start position:0%
байт-код метода загрузки также может называться
 

00:03:42.200 --> 00:03:44.869 align:start position:0%
байт-код метода загрузки также может называться
загрузкой <00:03:42.468><c>Adder, </c><00:03:42.736><c>но </c><00:03:43.004><c>это </c><00:03:43.272><c>одно </c><00:03:43.540><c>и </c><00:03:43.808><c>то </c><00:03:44.076><c>же.</c>

00:03:44.869 --> 00:03:44.879 align:start position:0%
загрузкой Adder, но это одно и то же.
 

00:03:44.879 --> 00:03:46.630 align:start position:0%
загрузкой Adder, но это одно и то же.
Затем <00:03:45.139><c>он </c><00:03:45.399><c>имеет  </c><00:03:45.659><c>для </c><00:03:45.919><c>загрузки </c><00:03:46.179><c>текущего </c><00:03:46.439><c>значения</c>

00:03:46.630 --> 00:03:46.640 align:start position:0%
Затем он имеет  для загрузки текущего значения
 

00:03:46.640 --> 00:03:49.429 align:start position:0%
Затем он имеет  для загрузки текущего значения
x <00:03:47.143><c>запустите </c><00:03:47.646><c>preall, </c><00:03:48.149><c>а </c><00:03:48.652><c>затем </c><00:03:49.155><c>вызовите</c>

00:03:49.429 --> 00:03:49.439 align:start position:0%
x запустите preall, а затем вызовите
 

00:03:49.439 --> 00:03:51.830 align:start position:0%
x запустите preall, а затем вызовите
метод <00:03:49.989><c>pin </c><00:03:50.539><c>загрузка </c><00:03:51.089><c>и </c><00:03:51.639><c>вызов</c>

00:03:51.830 --> 00:03:51.840 align:start position:0%
метод pin загрузка и вызов
 

00:03:51.840 --> 00:03:53.710 align:start position:0%
метод pin загрузка и вызов
такого <00:03:52.099><c>метода </c><00:03:52.358><c>может </c><00:03:52.617><c>стать </c><00:03:52.876><c>вычислительно</c>

00:03:53.710 --> 00:03:53.720 align:start position:0%
такого метода может стать вычислительно
 

00:03:53.720 --> 00:03:55.670 align:start position:0%
такого метода может стать вычислительно
затратным, <00:03:54.088><c>если </c><00:03:54.456><c>он </c><00:03:54.824><c>вызывается </c><00:03:55.192><c>многократно </c><00:03:55.560><c>в</c>

00:03:55.670 --> 00:03:55.680 align:start position:0%
затратным, если он вызывается многократно в
 

00:03:55.680 --> 00:03:57.990 align:start position:0%
затратным, если он вызывается многократно в
цикле <00:03:55.994><c>for, </c><00:03:56.308><c>как </c><00:03:56.622><c>этот, </c><00:03:56.936><c>это </c><00:03:57.250><c>происходит </c><00:03:57.564><c>потому, </c><00:03:57.878><c>что</c>

00:03:57.990 --> 00:03:58.000 align:start position:0%
цикле for, как этот, это происходит потому, что
 

00:03:58.000 --> 00:04:00.110 align:start position:0%
цикле for, как этот, это происходит потому, что
код <00:03:58.400><c>C </c><00:03:58.800><c>должен </c><00:03:59.200><c>сначала </c><00:03:59.600><c>понять, </c><00:04:00.000><c>что</c>

00:04:00.110 --> 00:04:00.120 align:start position:0%
код C должен сначала понять, что
 

00:04:00.120 --> 00:04:02.030 align:start position:0%
код C должен сначала понять, что
он <00:04:00.371><c>имеет </c><00:04:00.622><c>дело </c><00:04:00.873><c>со </c><00:04:01.124><c>списком, </c><00:04:01.375><c>затем </c><00:04:01.626><c>он </c><00:04:01.877><c>должен</c>

00:04:02.030 --> 00:04:02.040 align:start position:0%
он имеет дело со списком, затем он должен
 

00:04:02.040 --> 00:04:03.630 align:start position:0%
он имеет дело со списком, затем он должен
пойти <00:04:02.328><c>и </c><00:04:02.616><c>найти </c><00:04:02.904><c>метод </c><00:04:03.192><c>append </c><00:04:03.480><c>для</c>

00:04:03.630 --> 00:04:03.640 align:start position:0%
пойти и найти метод append для
 

00:04:03.640 --> 00:04:05.830 align:start position:0%
пойти и найти метод append для
объекта <00:04:03.992><c>list, </c><00:04:04.344><c>а </c><00:04:04.696><c>затем, </c><00:04:05.048><c>наконец, </c><00:04:05.400><c>выполнить</c>

00:04:05.830 --> 00:04:05.840 align:start position:0%
объекта list, а затем, наконец, выполнить
 

00:04:05.840 --> 00:04:08.550 align:start position:0%
объекта list, а затем, наконец, выполнить
операцию, <00:04:06.600><c>понимая, </c><00:04:07.360><c>что </c><00:04:08.120><c>генерация</c>

00:04:08.550 --> 00:04:08.560 align:start position:0%
операцию, понимая, что генерация
 

00:04:08.560 --> 00:04:10.990 align:start position:0%
операцию, понимая, что генерация
списка <00:04:08.879><c>- </c><00:04:09.198><c>это </c><00:04:09.517><c>часто </c><00:04:09.836><c>используемая </c><00:04:10.155><c>операция</c>

00:04:10.990 --> 00:04:11.000 align:start position:0%
списка - это часто используемая операция
 

00:04:11.000 --> 00:04:13.149 align:start position:0%
списка - это часто используемая операция
реализованное <00:04:11.340><c>на </c><00:04:11.680><c>Python </c><00:04:12.020><c>включение </c><00:04:12.360><c>списка,</c>

00:04:13.149 --> 00:04:13.159 align:start position:0%
реализованное на Python включение списка,
 

00:04:13.159 --> 00:04:15.270 align:start position:0%
реализованное на Python включение списка,
которое <00:04:13.459><c>использует </c><00:04:13.759><c>этот </c><00:04:14.059><c>специальный </c><00:04:14.359><c>код </c><00:04:14.659><c>bite </c><00:04:14.959><c>list</c>

00:04:15.270 --> 00:04:15.280 align:start position:0%
которое использует этот специальный код bite list
 

00:04:15.280 --> 00:04:18.430 align:start position:0%
которое использует этот специальный код bite list
Ain, <00:04:15.685><c>как </c><00:04:16.090><c>следует </c><00:04:16.495><c>из </c><00:04:16.900><c>названия, </c><00:04:17.305><c>он </c><00:04:17.710><c>добавляет </c><00:04:18.115><c>элементы</c>

00:04:18.430 --> 00:04:18.440 align:start position:0%
Ain, как следует из названия, он добавляет элементы
 

00:04:18.440 --> 00:04:20.670 align:start position:0%
Ain, как следует из названия, он добавляет элементы
в <00:04:18.779><c>список, </c><00:04:19.118><c>когда </c><00:04:19.457><c>этот </c><00:04:19.796><c>код </c><00:04:20.135><c>bite </c><00:04:20.474><c>отправляется</c>

00:04:20.670 --> 00:04:20.680 align:start position:0%
в список, когда этот код bite отправляется
 

00:04:20.680 --> 00:04:22.430 align:start position:0%
в список, когда этот код bite отправляется
на <00:04:21.070><c>виртуальную </c><00:04:21.460><c>машину </c><00:04:21.850><c>Python, </c><00:04:22.240><c>он</c>

00:04:22.430 --> 00:04:22.440 align:start position:0%
на виртуальную машину Python, он
 

00:04:22.440 --> 00:04:24.430 align:start position:0%
на виртуальную машину Python, он
сразу <00:04:22.686><c>понимает, </c><00:04:22.932><c>что </c><00:04:23.178><c>по </c><00:04:23.424><c>сути </c><00:04:23.670><c>он </c><00:04:23.916><c>имеет</c>

00:04:24.430 --> 00:04:24.440 align:start position:0%
сразу понимает, что по сути он имеет
 

00:04:24.440 --> 00:04:26.350 align:start position:0%
сразу понимает, что по сути он имеет
дело <00:04:25.026><c>со </c><00:04:25.612><c>списком, </c><00:04:26.198><c>и</c>

00:04:26.350 --> 00:04:26.360 align:start position:0%
дело со списком, и
 

00:04:26.360 --> 00:04:28.870 align:start position:0%
дело со списком, и
немедленно <00:04:26.824><c>добавляет </c><00:04:27.288><c>элемент, </c><00:04:27.752><c>что </c><00:04:28.216><c>устраняет </c><00:04:28.680><c>многие</c>

00:04:28.870 --> 00:04:28.880 align:start position:0%
немедленно добавляет элемент, что устраняет многие
 

00:04:28.880 --> 00:04:30.430 align:start position:0%
немедленно добавляет элемент, что устраняет многие
дополнительные <00:04:29.360><c>шаги, </c><00:04:29.840><c>необходимые </c><00:04:30.320><c>в</c>

00:04:30.430 --> 00:04:30.440 align:start position:0%
дополнительные шаги, необходимые в
 

00:04:30.440 --> 00:04:32.550 align:start position:0%
дополнительные шаги, необходимые в
цикле <00:04:30.768><c>for </c><00:04:31.096><c>для </c><00:04:31.424><c>загрузки </c><00:04:31.752><c>и </c><00:04:32.080><c>вызова</c>

00:04:32.550 --> 00:04:32.560 align:start position:0%
цикле for для загрузки и вызова
 

00:04:32.560 --> 00:04:35.029 align:start position:0%
цикле for для загрузки и вызова
метода <00:04:32.868><c>appin, </c><00:04:33.176><c>так </c><00:04:33.484><c>что </c><00:04:33.792><c>вот </c><00:04:34.100><c>вам </c><00:04:34.408><c>и </c><00:04:34.716><c>все</c>

00:04:35.029 --> 00:04:35.039 align:start position:0%
метода appin, так что вот вам и все
 

00:04:35.039 --> 00:04:37.110 align:start position:0%
метода appin, так что вот вам и все
включение <00:04:35.459><c>списка </c><00:04:35.879><c>использует </c><00:04:36.299><c>свой </c><00:04:36.719><c>собственный</c>

00:04:37.110 --> 00:04:37.120 align:start position:0%
включение списка использует свой собственный
 

00:04:37.120 --> 00:04:38.790 align:start position:0%
включение списка использует свой собственный
специализированный <00:04:37.613><c>код </c><00:04:38.106><c>bite, </c><00:04:38.599><c>который</c>

00:04:38.790 --> 00:04:38.800 align:start position:0%
специализированный код bite, который
 

00:04:38.800 --> 00:04:40.710 align:start position:0%
специализированный код bite, который
специально <00:04:39.359><c>разработан </c><00:04:39.918><c>для </c><00:04:40.477><c>генерации</c>

00:04:40.710 --> 00:04:40.720 align:start position:0%
специально разработан для генерации
 

00:04:40.720 --> 00:04:43.670 align:start position:0%
специально разработан для генерации
списка, <00:04:41.153><c>в </c><00:04:41.586><c>то </c><00:04:42.019><c>время </c><00:04:42.452><c>как </c><00:04:42.885><c>включение </c><00:04:43.318><c>списка,</c>

00:04:43.670 --> 00:04:43.680 align:start position:0%
списка, в то время как включение списка,
 

00:04:43.680 --> 00:04:45.189 align:start position:0%
списка, в то время как включение списка,
как <00:04:43.944><c>правило, </c><00:04:44.208><c>более </c><00:04:44.472><c>читабельно </c><00:04:44.736><c>и </c><00:04:45.000><c>более</c>

00:04:45.189 --> 00:04:45.199 align:start position:0%
как правило, более читабельно и более
 

00:04:45.199 --> 00:04:47.430 align:start position:0%
как правило, более читабельно и более
эффективно, <00:04:45.607><c>это </c><00:04:46.015><c>действительно </c><00:04:46.423><c>может </c><00:04:46.831><c>зависеть </c><00:04:47.239><c>от</c>

00:04:47.430 --> 00:04:47.440 align:start position:0%
эффективно, это действительно может зависеть от
 

00:04:47.440 --> 00:04:49.469 align:start position:0%
эффективно, это действительно может зависеть от
ситуации, <00:04:47.879><c>если </c><00:04:48.318><c>вы </c><00:04:48.757><c>генерируете </c><00:04:49.196><c>довольно</c>

00:04:49.469 --> 00:04:49.479 align:start position:0%
ситуации, если вы генерируете довольно
 

00:04:49.479 --> 00:04:51.909 align:start position:0%
ситуации, если вы генерируете довольно
простой <00:04:50.539><c>список, </c><00:04:51.599><c>то</c>

00:04:51.909 --> 00:04:51.919 align:start position:0%
простой список, то
 

00:04:51.919 --> 00:04:53.830 align:start position:0%
простой список, то
включение <00:04:52.170><c>списка </c><00:04:52.421><c>- </c><00:04:52.672><c>это  </c><00:04:52.923><c>Это </c><00:04:53.174><c>так, </c><00:04:53.425><c>но </c><00:04:53.676><c>этим</c>

00:04:53.830 --> 00:04:53.840 align:start position:0%
включение списка - это  Это так, но этим
 

00:04:53.840 --> 00:04:56.110 align:start position:0%
включение списка - это  Это так, но этим
можно <00:04:54.264><c>злоупотребить, </c><00:04:54.688><c>если </c><00:04:55.112><c>вы </c><00:04:55.536><c>начнете </c><00:04:55.960><c>пытаться</c>

00:04:56.110 --> 00:04:56.120 align:start position:0%
можно злоупотребить, если вы начнете пытаться
 

00:04:56.120 --> 00:04:58.230 align:start position:0%
можно злоупотребить, если вы начнете пытаться
использовать <00:04:56.733><c>сложные </c><00:04:57.346><c>операции </c><00:04:57.959><c>в</c>

00:04:58.230 --> 00:04:58.240 align:start position:0%
использовать сложные операции в
 

00:04:58.240 --> 00:05:00.070 align:start position:0%
использовать сложные операции в
понимании <00:04:58.589><c>списка, </c><00:04:58.938><c>и, </c><00:04:59.287><c>следовательно, </c><00:04:59.636><c>пожертвуете</c>

00:05:00.070 --> 00:05:00.080 align:start position:0%
понимании списка, и, следовательно, пожертвуете
 

00:05:00.080 --> 00:05:02.310 align:start position:0%
понимании списка, и, следовательно, пожертвуете
читабельностью. <00:05:01.020><c>Вероятно, </c><00:05:01.960><c>лучше</c>

00:05:02.310 --> 00:05:02.320 align:start position:0%
читабельностью. Вероятно, лучше
 

00:05:02.320 --> 00:05:04.670 align:start position:0%
читабельностью. Вероятно, лучше
просто <00:05:02.693><c>использовать </c><00:05:03.066><c>цикл </c><00:05:03.439><c>for. </c><00:05:03.812><c>Я </c><00:05:04.185><c>хочу </c><00:05:04.558><c>воспользоваться</c>

00:05:04.670 --> 00:05:04.680 align:start position:0%
просто использовать цикл for. Я хочу воспользоваться
 

00:05:04.680 --> 00:05:06.430 align:start position:0%
просто использовать цикл for. Я хочу воспользоваться
моментом, <00:05:04.946><c>чтобы </c><00:05:05.212><c>поблагодарить </c><00:05:05.478><c>участников </c><00:05:05.744><c>клуба </c><00:05:06.010><c>BIK </c><00:05:06.276><c>за</c>

00:05:06.430 --> 00:05:06.440 align:start position:0%
моментом, чтобы поблагодарить участников клуба BIK за
 

00:05:06.440 --> 00:05:08.390 align:start position:0%
моментом, чтобы поблагодарить участников клуба BIK за
невероятную <00:05:06.750><c>поддержку, </c><00:05:07.060><c>которую </c><00:05:07.370><c>вы </c><00:05:07.680><c>оказали.</c>

00:05:08.390 --> 00:05:08.400 align:start position:0%
невероятную поддержку, которую вы оказали.
 

00:05:08.400 --> 00:05:10.110 align:start position:0%
невероятную поддержку, которую вы оказали.
Если <00:05:08.712><c>вам </c><00:05:09.024><c>понравилось </c><00:05:09.336><c>это </c><00:05:09.648><c>видео, </c><00:05:09.960><c>обязательно</c>

00:05:10.110 --> 00:05:10.120 align:start position:0%
Если вам понравилось это видео, обязательно
 

00:05:10.120 --> 00:05:12.189 align:start position:0%
Если вам понравилось это видео, обязательно
поставьте <00:05:10.439><c>лайк </c><00:05:10.758><c>и </c><00:05:11.077><c>подпишитесь </c><00:05:11.396><c>— </c><00:05:11.715><c>это </c><00:05:12.034><c>лучший</c>

00:05:12.189 --> 00:05:12.199 align:start position:0%
поставьте лайк и подпишитесь — это лучший
 

00:05:12.199 --> 00:05:14.430 align:start position:0%
поставьте лайк и подпишитесь — это лучший
способ <00:05:12.607><c>увидеть </c><00:05:13.015><c>больше </c><00:05:13.423><c>подобного </c><00:05:13.831><c>контента. </c><00:05:14.239><c>Спасибо</c>

00:05:14.430 --> 00:05:14.440 align:start position:0%
способ увидеть больше подобного контента. Спасибо
 

00:05:14.440 --> 00:05:15.830 align:start position:0%
способ увидеть больше подобного контента. Спасибо
за <00:05:14.866><c>просмотр. </c><00:05:15.292><c>Увидимся </c><00:05:15.718><c>в</c>

00:05:15.830 --> 00:05:15.840 align:start position:0%
за просмотр. Увидимся в
 

00:05:15.840 --> 00:05:23.469 align:start position:0%
за просмотр. Увидимся в
следующем

00:05:23.469 --> 00:05:23.479 align:start position:0%
 
 

00:05:23.479 --> 00:05:26.479 align:start position:0%
 
видео.

